Erlang port protocol
====================

Setup test modules, classes and functions:

    >>> import os
    >>> from erlport.erlproto import Port, Protocol
    >>> from erlport.erlterms import Atom, encode, decode

    >>> class TestProtocol(Protocol):
    ...
    ...     def handle_test(self, value="test"):
    ...         return value
    ...
    ...     def handle_crash(self):
    ...         raise ValueError("error")
    ...
    ...     def handle_unicode_crash(self):
    ...         raise ValueError(unicode("тест", "utf-8"))

    >>> def get_test_proto(proto, packet=1, compressed=False):
    ...     def test(request):
    ...         r, out_d = os.pipe()
    ...         in_d, w = os.pipe()
    ...         port = Port(packet, compressed=compressed, descriptors=(r, w))
    ...         port2 = Port(packet, compressed=compressed, descriptors=(in_d, out_d))
    ...         port2.write(request)
    ...         proto.handle(port, port.read())
    ...         return port2.read()
    ...     return test

Test protocol with different options:

    >>> test = get_test_proto(TestProtocol())
    >>> test((Atom("test"), "value"))
    'value'
    >>> test(Atom("test"))
    'test'

    >>> test = get_test_proto(TestProtocol(), packet=2)
    >>> test((Atom("test"), "value"))
    'value'

    >>> test = get_test_proto(TestProtocol(), packet=4)
    >>> test((Atom("test"), "value"))
    'value'

    >>> test = get_test_proto(TestProtocol(), compressed=True)
    >>> test((Atom("test"), "value"))
    'value'

    >>> test = get_test_proto(TestProtocol(), compressed=9)
    >>> test((Atom("test"), "value"))
    'value'

Some common errors:

    >>> test = get_test_proto(TestProtocol(), packet=2)

    >>> test("unknown")
    (atom(error), atom(badarg))
    >>> test(Atom("unknown"))
    (atom(error), atom(undef))

Exceptions must return type, value and reversed traceback:

    >>> test((Atom("test"), 1, 2)) # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS
    (atom(error), (atom(exception), (atom(exceptions.TypeError),
        [104, 97, 110, 100, 108, 101, 95, 116, 101, 115, 116, 40, 41, 32,
            116, 97, 107, 101, 115, 32, 97, 116, 32, 109, 111, 115, 116, 32,
            50, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32,
            40, 51, 32, 103, 105, 118, 101, 110, 41],
        [('.../erlproto.py', 73, 'handle', 'response = handler(*args)')])))

    >>> test(Atom("crash")) # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS
    (atom(error), (atom(exception), (atom(exceptions.ValueError),
        [101, 114, 114, 111, 114],
        [('<doctest erlproto.txt[3]>', 7, 'handle_crash',
            'raise ValueError("error")'),
        ('.../erlproto.py', 73, 'handle', 'response = handler(*args)')])))

    >>> test(Atom("unicode_crash")) # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS
    (atom(error), (atom(exception), (atom(exceptions.ValueError),
        [1090, 1077, 1089, 1090],
        [('<doctest erlproto.txt[3]>', 10, 'handle_unicode_crash',
            'raise ValueError(unicode("\xd1\x82\xd0\xb5\xd1\x81\xd1\x82",
            "utf-8"))'),
        ('.../erlproto.py', 73,
            'handle', 'response = handler(*args)')])))
