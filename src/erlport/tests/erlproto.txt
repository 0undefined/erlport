Erlang port protocol
====================

Setup test modules, classes and functions:

    >>> import os
    >>> from erlport.erlproto import Port, Protocol
    >>> from erlport.erlterms import Atom, encode, decode

    >>> class TestProtocol(Protocol):
    ...
    ...     def handle_test(self, value):
    ...         return Atom("return"), value

    >>> def test(proto, *args, **kwargs):
    ...     r, w = os.pipe()
    ...     if "use_stdio" in kwargs:
    ...         in_d, out_d = 0, 1
    ...     else:
    ...         in_d, out_d = 3, 4
    ...     os.dup2(r, in_d)
    ...     os.dup2(w, out_d)
    ...
    ...     port = Port(proto)
    ...     os.write(4, encode((Atom("test"), u"value")))
    ...     port.connect(*args, **kwargs)
    ...     result = os.read(3, 1024)
    ...     port.close()
    ...     return decode(result)

Test protocol with different options:

    >>> test(TestProtocol())
    ((atom(test), string(u'value')), '')

    >>> test(TestProtocol(), packet=2)
    ((atom(test), string(u'value')), '')

    >>> test(TestProtocol(), packet=4)
    ((atom(test), string(u'value')), '')

    >>> test(TestProtocol(), use_stdio=True)
    ((atom(test), string(u'value')), '')
