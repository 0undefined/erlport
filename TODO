- Add info() function with statistics and information, for example number
  of requests/responses, number of sent/received bytes, number of
  errors for requests/responses, uptime?

- Pluggable encoders/decoders? We can register proxy encoder/decoder functions.
  If encoder/decoder is defined we just scan through hierarchy of objects and
  call encoder/decoder for each object.

- Convert Python tests from doctests to unittest

- Tests for erlterms.OpaqueObject encoding/decoding

- Maybe decode Erlang opaque object on Erlang side also?

- Check exports in erlport.__init__

- Add lock for erlang.call and maybe for erlang.receive?

- Add 'buffer_size' option?

- Replace rebar with custom scripts?

- Check Python version by calling python -V

- Maybe return expected type in case of option error?

- Check code with older versions of Erlang/Python

- Update tests for Python. Add tests for all data types for Erlang <-> Python

- Comments for modules

- How to handle Python <-> Python exceptions? We can pass it inside some error
  term. Errors/exceptions should be like opaque types marked with the language
  but store some known structures as values

- Check default port options on Windows

- Maybe force strings with {string, String} and {struct, Dict}? It can be done
  with pluggable encoder/decoder. We can add 'reach' encoder/decoder plugin
  functions

- Support argparse instead of optparse on Python 3?

- Python 3, other languages? Ruby? What about different Ruby versions?

- Add worker_pool module with pluggable workers selection policies

- Maybe we can try variable length length field as in Twisted Banana/Protocol
  Buffers protocols?
